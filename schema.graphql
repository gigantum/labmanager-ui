# source: http://localhost:10001/labbook/
# timestamp: Tue Nov 07 2017 13:03:55 GMT-0500 (EST)

input AddEnvironmentComponentInput {
  labbookName: String!
  owner: String
  componentClass: EnvironmentComponentClass!
  repository: String!
  namespace: String!
  component: String!
  version: String!
  clientMutationId: String
}

# Mutation to add a new environment component to a LabBook
type AddEnvironmentComponentPayload {
  environmentComponent: EnvironmentComponent
  clientMutationId: String
}

input AddEnvironmentPackageInput {
  labbookName: String!
  owner: String
  packageManager: String!
  packageName: String!
  packageVersion: String
  clientMutationId: String
}

# Mutation to add a new package to labbook. 
type AddEnvironmentPackagePayload {
  environmentPackage: PackageManager
  clientMutationId: String
}

input AddLabbookFavoriteInput {
  owner: String!
  labbookName: String!
  subdir: String!
  key: String!
  description: String
  isDir: String
  index: Int
  clientMutationId: String
}

type AddLabbookFavoritePayload {
  newFavoriteEdge: LabbookFavoriteEdge
  clientMutationId: String
}

input AddLabbookFileInput {
  user: String!
  owner: String!
  labbookName: String!
  filePath: String!
  chunkUploadParams: ChunkUploadInput!
  clientMutationId: String
}

# Mutation to add a file to a labbook. File should be sent in the `uploadFile` key as a multi-part/form upload.
# file_path is the relative path from the labbook root.
type AddLabbookFilePayload {
  newLabbookFileEdge: LabbookFileEdge
  clientMutationId: String
}

# A type that represents a Base Image Environment Component
type BaseImage implements Node {
  # The ID of the object.
  id: ID!
  component: EnvironmentComponent!
  author: EnvironmentAuthor!
  info: EnvironmentInfo!
  osClass: String!
  osRelease: String!
  server: String!
  namespace: String!
  repository: String!
  tag: String!
  availablePackageManagers: [String]!
}

type BaseImageConnection {
  pageInfo: PageInfo!
  edges: [BaseImageEdge]!
}

type BaseImageEdge {
  # The item at the end of the edge
  node: BaseImage

  # A cursor for use in pagination
  cursor: String!
}

input BuildImageInput {
  owner: String
  labbookName: String!
  clientMutationId: String
}

# Mutator to build a LabBook's Docker Image
type BuildImagePayload {
  environment: Environment
  backgroundJobKey: String
  clientMutationId: String
}

input CheckoutBranchInput {
  owner: String
  labbookName: String!
  branchName: String!
  clientMutationId: String
}

# Mutation checkout an existing branch branch
type CheckoutBranchPayload {
  labbook: Labbook
  clientMutationId: String
}

# Input Object for params needed for a chunked upload
#
# To use, add a field `chunk_upload_params` to your mutation input
input ChunkUploadInput {
  fileSizeKb: Int!
  chunkSize: Int!
  totalChunks: Int!
  chunkIndex: Int!
  filename: String!
  uploadId: String!
}

# An enumeration for container image status
enum ContainerStatus {
  NOT_RUNNING
  STARTING
  RUNNING
}

input CreateBranchInput {
  owner: String
  labbookName: String!
  branchName: String!
  clientMutationId: String
}

# Mutation create a NEW branch for a LabBook LOCALLY
type CreateBranchPayload {
  branch: LabbookRef
  clientMutationId: String
}

input CreateLabbookInput {
  name: String!
  description: String!
  clientMutationId: String
}

# Mutator for creation of a new Labbook on disk
type CreateLabbookPayload {
  labbook: Labbook
  clientMutationId: String
}

input CreateNoteInput {
  labbookName: String!
  owner: String
  level: NoteLogLevel!
  message: String!
  linkedCommit: String!
  tags: [String]
  freeText: String
  objects: [NoteObjectInput]
  clientMutationId: String
}

# Mutation to create a new note entry
type CreateNotePayload {
  note: Note
  clientMutationId: String
}

input CreateUserNoteInput {
  labbookName: String!
  owner: String
  message: String!
  freeText: String
  tags: [String]
  objects: [NoteObjectInput]
  clientMutationId: String
}

# Mutation to create a new user note entry in the activity feed of lab book
#
# The log level is set to USER_NOTE automatically and the `linked_commit` is an empty string
type CreateUserNotePayload {
  note: Note
  clientMutationId: String
}

# A type that represents a Custom Dependency Environment Component
type CustomDependency implements Node {
  # The ID of the object.
  id: ID!
  component: EnvironmentComponent!
  author: EnvironmentAuthor!
  info: EnvironmentInfo!
  osBaseClass: String!
  docker: String!
}

type CustomDependencyConnection {
  pageInfo: PageInfo!
  edges: [CustomDependencyEdge]!
}

type CustomDependencyEdge {
  # The item at the end of the edge
  node: CustomDependency

  # A cursor for use in pagination
  cursor: String!
}

# The `DateTime` scalar type represents a DateTime
# value as specified by
# [iso8601](https://en.wikipedia.org/wiki/ISO_8601).
scalar DateTime

input DeleteLabbookFileInput {
  user: String!
  owner: String!
  labbookName: String!
  filePath: String!
  isDirectory: Boolean
  clientMutationId: String
}

type DeleteLabbookFilePayload {
  success: Boolean
  clientMutationId: String
}

# A type that represents a Development Environment Environment Component
type DevEnv implements Node {
  # The ID of the object.
  id: ID!
  component: EnvironmentComponent!
  author: EnvironmentAuthor!
  info: EnvironmentInfo!
  osBaseClass: String!
  developmentEnvironmentClass: String!
  installCommands: [String]!
  execCommands: [String]!
  exposedTcpPorts: [String]!
}

type DevEnvConnection {
  pageInfo: PageInfo!
  edges: [DevEnvEdge]!
}

type DevEnvEdge {
  # The item at the end of the edge
  node: DevEnv

  # A cursor for use in pagination
  cursor: String!
}

# A type that represents the Environment for a LabBook
type Environment implements Node {
  # The ID of the object.
  id: ID!
  imageStatus: ImageStatus
  containerStatus: ContainerStatus
  baseImage: BaseImage
  devEnvs(before: String, after: String, first: Int, last: Int): DevEnvConnection
  packageManagerDependencies(before: String, after: String, first: Int, last: Int): PackageManagerConnection
  customDependencies(before: String, after: String, first: Int, last: Int): CustomDependencyConnection
}

# A type that represents the Author of an environment component
type EnvironmentAuthor implements Node {
  # The ID of the object.
  id: ID!
  name: String!
  email: String!
  username: String!
  organization: String
}

# A type that represents the identifiable information for an environment component
type EnvironmentComponent implements Node {
  # The ID of the object.
  id: ID!
  repository: String
  namespace: String
  name: String
  version: String
  componentClass: EnvironmentComponentClass
}

# Enumeration indicating the different classes of Environment Components
#
# base_image - base docker images
# dev_env - development environments
# package_manager - dependencies installed via package managers
# custom - complex dependencies that are installed via custom docker snippets
enum EnvironmentComponentClass {
  base_image
  dev_env
  package_manager
  custom
}

# A type that represents the Info section of an environment component
type EnvironmentInfo implements Node {
  # The ID of the object.
  id: ID!
  name: String!
  humanName: String!
  description: String!
  versionMajor: Int!
  versionMinor: Int!
  tags: [String]
  icon: String
}

input ExportLabbookInput {
  user: String!
  owner: String!
  labbookName: String!
  clientMutationId: String
}

type ExportLabbookPayload {
  jobKey: String
  clientMutationId: String
}

# An interface for any object that is represented by a git commit
interface GitCommit {
  hash: String
  shortHash: String
  committedOn: String
}

# An interface for any git reference
interface GitRef {
  name: String
  prefix: String
}

# An interface for Objects backended with git repositories (LabBook and Datasets)
interface GitRepository {
  name: String
  description: String
  owner: Owner
}

# An enumeration for Docker image status
enum ImageStatus {
  DOES_NOT_EXIST
  BUILD_IN_PROGRESS
  EXISTS
  STALE
  BUILD_FAILED
}

input ImportLabbookInput {
  owner: String!
  user: String!
  chunkUploadParams: ChunkUploadInput!
  clientMutationId: String
}

type ImportLabbookPayload {
  importJobKey: String
  buildImageJobKey: String
  clientMutationId: String
}

# A query to get the status of a background task launched with the Dispatcher
type JobStatus implements Node {
  # The ID of the object.
  id: ID!
  jobKey: String
  status: String
  startedAt: String
  finishedAt: String
  result: String
}

type JobStatusConnection {
  pageInfo: PageInfo!
  edges: [JobStatusEdge]!
}

type JobStatusEdge {
  # The item at the end of the edge
  node: JobStatus

  # A cursor for use in pagination
  cursor: String!
}

# A type representing a LabBook and all of its contents
#
# LabBooks are uniquely identified by both the "owner" and the "name" of the LabBook
type Labbook implements Node, GitRepository {
  # The ID of the object.
  id: ID!
  name: String
  description: String
  owner: Owner
  activeBranch: LabbookRef
  branches(before: String, after: String, first: Int, last: Int): LabbookRefConnection
  environment: Environment
  files(baseDir: String, before: String, after: String, first: Int, last: Int): LabbookFileConnection
  codeFiles(baseDir: String = "code/", before: String, after: String, first: Int, last: Int): LabbookFileConnection
  inputFiles(baseDir: String = "input/", before: String, after: String, first: Int, last: Int): LabbookFileConnection
  outputFiles(baseDir: String = "output/", before: String, after: String, first: Int, last: Int): LabbookFileConnection
  favorites(subdir: String, before: String, after: String, first: Int, last: Int): LabbookFavoriteConnection
  notes(before: String, after: String, first: Int, last: Int): NoteConnection
}

# An object representing a commit to a LabBook
type LabbookCommit implements GitCommit, Node {
  hash: String
  shortHash: String
  committedOn: String

  # The ID of the object.
  id: ID!
}

type LabbookConnection {
  pageInfo: PageInfo!
  edges: [LabbookEdge]!
}

type LabbookEdge {
  # The item at the end of the edge
  node: Labbook

  # A cursor for use in pagination
  cursor: String!
}

# A type representing a file or directory that has been favorited in the labbook file system.
type LabbookFavorite implements Node {
  # The ID of the object.
  id: ID!
  index: Int
  key: String
  description: String
  isDir: Boolean
}

type LabbookFavoriteConnection {
  pageInfo: PageInfo!
  edges: [LabbookFavoriteEdge]!
}

type LabbookFavoriteEdge {
  # The item at the end of the edge
  node: LabbookFavorite

  # A cursor for use in pagination
  cursor: String!
}

# A type representing a file or directory inside the labbook file system.
type LabbookFile implements Node {
  # The ID of the object.
  id: ID!
  isDir: Boolean
  modifiedAt: Int
  key: String
  size: Int
}

type LabbookFileConnection {
  pageInfo: PageInfo!
  edges: [LabbookFileEdge]!
}

type LabbookFileEdge {
  # The item at the end of the edge
  node: LabbookFile

  # A cursor for use in pagination
  cursor: String!
}

# An object representing a git reference in a LabBook repository
type LabbookRef implements Node, GitRef {
  # The ID of the object.
  id: ID!
  name: String
  prefix: String
  commit: LabbookCommit
}

type LabbookRefConnection {
  pageInfo: PageInfo!
  edges: [LabbookRefEdge]!
}

type LabbookRefEdge {
  # The item at the end of the edge
  node: LabbookRef

  # A cursor for use in pagination
  cursor: String!
}

input MakeLabbookDirectoryInput {
  user: String!
  owner: String!
  labbookName: String!
  dirName: String!
  clientMutationId: String
}

type MakeLabbookDirectoryPayload {
  newLabbookFileEdge: LabbookFileEdge
  clientMutationId: String
}

input MoveLabbookFileInput {
  user: String!
  owner: String!
  labbookName: String!
  srcPath: String!
  dstPath: String!
  clientMutationId: String
}

# Method to move/rename a file or directory. If file, both src_path and dst_path should contain the file name.
# If a directory, be sure to include the trailing slash
type MoveLabbookFilePayload {
  newLabbookFileEdge: LabbookFileEdge
  clientMutationId: String
}

type Mutation {
  importLabbook(input: ImportLabbookInput!): ImportLabbookPayload
  exportLabbook(input: ExportLabbookInput!): ExportLabbookPayload
  createLabbook(input: CreateLabbookInput!): CreateLabbookPayload
  renameLabbook(input: RenameLabbookInput!): RenameLabbookPayload
  createBranch(input: CreateBranchInput!): CreateBranchPayload
  checkoutBranch(input: CheckoutBranchInput!): CheckoutBranchPayload
  buildImage(input: BuildImageInput!): BuildImagePayload
  startContainer(input: StartContainerInput!): StartContainerPayload
  stopContainer(input: StopContainerInput!): StopContainerPayload
  createNote(input: CreateNoteInput!): CreateNotePayload
  createUserNote(input: CreateUserNoteInput!): CreateUserNotePayload
  addEnvironmentComponent(input: AddEnvironmentComponentInput!): AddEnvironmentComponentPayload
  addEnvironmentPackage(input: AddEnvironmentPackageInput!): AddEnvironmentPackagePayload
  addLabbookFile(input: AddLabbookFileInput!): AddLabbookFilePayload
  moveLabbookFile(input: MoveLabbookFileInput!): MoveLabbookFilePayload
  deleteLabbookFile(input: DeleteLabbookFileInput!): DeleteLabbookFilePayload
  makeLabbookDirectory(input: MakeLabbookDirectoryInput!): MakeLabbookDirectoryPayload
  removeUserIdentity(input: RemoveUserIdentityInput!): RemoveUserIdentityPayload
  addFavorite(input: AddLabbookFavoriteInput!): AddLabbookFavoritePayload
  removeFavorite(input: RemoveLabbookFavoriteInput!): RemoveLabbookFavoritePayload
}

# An object with an ID
interface Node {
  # The ID of the object.
  id: ID!
}

# A type representing a single note entry in a labbook
type Note implements Node {
  # The ID of the object.
  id: ID!
  commit: ID
  linkedCommit: ID
  message: String
  author: String
  level: NoteLogLevel
  tags: [String]
  timestamp: DateTime
  freeText: String
  objects(before: String, after: String, first: Int, last: Int): NoteObjectConnection
}

type NoteConnection {
  pageInfo: PageInfo!
  edges: [NoteEdge]!
}

type NoteEdge {
  # The item at the end of the edge
  node: Note

  # A cursor for use in pagination
  cursor: String!
}

enum NoteLogLevel {
  USER_NOTE
  USER_MAJOR
  USER_MINOR
  AUTO_MAJOR
  AUTO_MINOR
  AUTO_DETAIL
}

# Container for arbitrary objects stored within a note
type NoteObject implements Node {
  # The ID of the object.
  id: ID!
  key: String
  type: String
  value: String
}

type NoteObjectConnection {
  pageInfo: PageInfo!
  edges: [NoteObjectEdge]!
}

type NoteObjectEdge {
  # The item at the end of the edge
  node: NoteObject

  # A cursor for use in pagination
  cursor: String!
}

input NoteObjectInput {
  key: String
  type: String
  value: String
}

# A type representing the owner of a LabBook or Dataset
type Owner implements Node, User {
  # The ID of the object.
  id: ID!
  username: String
  email: String
  givenName: String
  familyName: String
}

# A type that represents a Package Manager based Environment Component
type PackageManager implements Node {
  # The ID of the object.
  id: ID!
  packageManager: String!
  packageName: String!
  packageVersion: String
}

type PackageManagerConnection {
  pageInfo: PageInfo!
  edges: [PackageManagerEdge]!
}

type PackageManagerEdge {
  # The item at the end of the edge
  node: PackageManager

  # A cursor for use in pagination
  cursor: String!
}

type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  # The ID of the object
  node(id: ID!): Node
  labbook(owner: String, name: String): Labbook
  jobStatus(jobId: String): JobStatus
  backgroundJobs(before: String, after: String, first: Int, last: Int): JobStatusConnection
  localLabbooks(before: String, after: String, first: Int, last: Int): LabbookConnection
  availableBaseImages(before: String, after: String, first: Int, last: Int): BaseImageConnection
  availableBaseImageVersions(repository: String, namespace: String, component: String, before: String, after: String, first: Int, last: Int): BaseImageConnection
  availableDevEnvs(before: String, after: String, first: Int, last: Int): DevEnvConnection
  availableDevEnvVersions(repository: String, namespace: String, component: String, before: String, after: String, first: Int, last: Int): DevEnvConnection
  availableCustomDependencies(before: String, after: String, first: Int, last: Int): CustomDependencyConnection
  availableCustomDependenciesVersions(repository: String, namespace: String, component: String, before: String, after: String, first: Int, last: Int): CustomDependencyConnection
  userIdentity: UserIdentity
}

input RemoveLabbookFavoriteInput {
  owner: String!
  labbookName: String!
  subdir: String!
  index: Int!
  clientMutationId: String
}

type RemoveLabbookFavoritePayload {
  success: Boolean
  clientMutationId: String
}

input RemoveUserIdentityInput {
  clientMutationId: String
}

# Mutation to remove a locally stored user identity (no-op if not running in local mode)
type RemoveUserIdentityPayload {
  userIdentityEdge: UserIdentity
  clientMutationId: String
}

input RenameLabbookInput {
  user: String!
  owner: String!
  originalLabbookName: String!
  newLabbookName: String!
  clientMutationId: String
}

# Rename a labbook
type RenameLabbookPayload {
  success: Boolean
  clientMutationId: String
}

input StartContainerInput {
  owner: String!
  labbookName: String!
  clientMutationId: String
}

# Mutator to start a LabBook's Docker Image in a container
type StartContainerPayload {
  environment: Environment
  backgroundJobKey: String
  clientMutationId: String
}

input StopContainerInput {
  owner: String
  labbookName: String!
  clientMutationId: String
}

# Mutation to stop a Docker container. 
type StopContainerPayload {
  environment: Environment
  backgroundJobKey: String
  clientMutationId: String
}

# Interface representing a user in the system
interface User {
  username: String
  email: String
  givenName: String
  familyName: String
}

# A type representing the identity of the logged in user
type UserIdentity implements Node, User {
  # The ID of the object.
  id: ID!
  username: String
  email: String
  givenName: String
  familyName: String
}
