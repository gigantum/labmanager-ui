# source: http://localhost:5000/labbook/
# timestamp: Tue Aug 08 2017 14:01:53 GMT-0400 (EDT)

# A type that represents a Base Image Environment Component
type BaseImage implements Node {
  # The ID of the object.
  id: ID!
  author: EnvironmentAuthor!
  info: EnvironmentInfo!
  osClass: String!
  osRelease: String!
  server: String!
  namespace: String!
  repo: String!
  tag: String!
  availablePackageManagers: [String]!
}

type BaseImageConnection {
  pageInfo: PageInfo!
  edges: [BaseImageEdge]!
}

type BaseImageEdge {
  # The item at the end of the edge
  node: BaseImage

  # A cursor for use in pagination
  cursor: String!
}

input BuildImageInput {
  owner: String
  labbookName: String!
  clientMutationId: String
}

# Mutator to build a LabBook's Docker Image
type BuildImagePayload {
  environment: Environment
  clientMutationId: String
}

input CheckoutBranchInput {
  owner: String
  labbookName: String!
  branchName: String!
  clientMutationId: String
}

# Mutation checkout an existing branch branch
type CheckoutBranchPayload {
  labbook: Labbook
  clientMutationId: String
}

# An enumeration for container image status
enum ContainerStatus {
  NOT_RUNNING
  STARTING
  RUNNING
}

input CreateBranchInput {
  owner: String
  labbookName: String!
  branchName: String!
  clientMutationId: String
}

# Mutation create a NEW branch for a LabBook LOCALLY
type CreateBranchPayload {
  branch: LabbookRef
  clientMutationId: String
}

input CreateLabbookInput {
  name: String!
  description: String!
  clientMutationId: String
}

# Mutator for creation of a new Labbook on disk
type CreateLabbookPayload {
  labbook: Labbook
  clientMutationId: String
}

input CreateNoteInput {
  labbookName: String!
  owner: String
  level: NoteLogLevel!
  message: String!
  linkedCommit: String!
  tags: [String]
  freeText: String
  objects: [NoteObjectInput]
  clientMutationId: String
}

# Mutation to create a new note entry
type CreateNotePayload {
  note: Note
  clientMutationId: String
}

# The `DateTime` scalar type represents a DateTime
# value as specified by
# [iso8601](https://en.wikipedia.org/wiki/ISO_8601).
scalar DateTime

# A type that represents the Environment for a LabBook
type Environment implements Node {
  # The ID of the object.
  id: ID!
  imageStatus: ImageStatus
  containerStatus: ContainerStatus
}

# A type that represents the Author of an environment component
type EnvironmentAuthor implements Node {
  # The ID of the object.
  id: ID!
  name: String!
  email: String!
  username: String!
  organization: String
}

# A type that represents the Info section of an environment component
type EnvironmentInfo implements Node {
  # The ID of the object.
  id: ID!
  name: String!
  humanName: String!
  description: String!
  versionMajor: Int!
  versionMinor: Int!
  tags: [String]
  icon: String
}

# An interface for any object that is represented by a git commit
interface GitCommit {
  hash: String
  shortHash: String
  committedOn: String
}

# An interface for any git reference
interface GitRef {
  name: String
  prefix: String
}

# An interface for Objects backended with git repositories (LabBook and Datasets)
interface GitRepository {
  name: String
  description: String
  owner: Owner
}

# An enumeration for Docker image status
enum ImageStatus {
  DOES_NOT_EXIST
  BUILD_IN_PROGRESS
  EXISTS
  STALE
}

# A type representing a LabBook and all of its contents
#
# LabBooks are uniquely identified by both the "owner" and the "name" of the LabBook
type Labbook implements Node, GitRepository {
  # The ID of the object.
  id: ID!
  name: String
  description: String
  owner: Owner
  activeBranch: LabbookRef
  branches(before: String, after: String, first: Int, last: Int): LabbookRefConnection
  environment: Environment
  notes(before: String, after: String, first: Int, last: Int): NoteConnection
}

# An object representing a commit to a LabBook
type LabbookCommit implements GitCommit, Node {
  hash: String
  shortHash: String
  committedOn: String

  # The ID of the object.
  id: ID!
}

type LabbookConnection {
  pageInfo: PageInfo!
  edges: [LabbookEdge]!
}

type LabbookEdge {
  # The item at the end of the edge
  node: LabbookSummary

  # A cursor for use in pagination
  cursor: String!
}

# An object representing a git reference in a LabBook repository
type LabbookRef implements Node, GitRef {
  # The ID of the object.
  id: ID!
  name: String
  prefix: String
  commit: LabbookCommit
}

type LabbookRefConnection {
  pageInfo: PageInfo!
  edges: [LabbookRefEdge]!
}

type LabbookRefEdge {
  # The item at the end of the edge
  node: LabbookRef

  # A cursor for use in pagination
  cursor: String!
}

# A type representing a summary of a LabBook used for listing LabBooks
#
# LabBooks are uniquely identified by both the "owner" and the "name" of the LabBook
type LabbookSummary implements Node, GitRepository {
  # The ID of the object.
  id: ID!
  name: String
  description: String
  owner: Owner
}

type Mutation {
  createLabbook(input: CreateLabbookInput!): CreateLabbookPayload
  createBranch(input: CreateBranchInput!): CreateBranchPayload
  checkoutBranch(input: CheckoutBranchInput!): CheckoutBranchPayload
  buildImage(input: BuildImageInput!): BuildImagePayload
  startContainer(input: StartContainerInput!): StartContainerPayload
  createNote(input: CreateNoteInput!): CreateNotePayload
}

# An object with an ID
interface Node {
  # The ID of the object.
  id: ID!
}

# A type representing a single note entry in a labbook
type Note implements Node {
  # The ID of the object.
  id: ID!
  commit: ID
  linkedCommit: ID
  message: String
  author: String
  level: NoteLogLevel
  tags: [String]
  timestamp: DateTime
  freeText: String
  objects(before: String, after: String, first: Int, last: Int): NoteObjectConnection
}

type NoteConnection {
  pageInfo: PageInfo!
  edges: [NoteEdge]!
}

type NoteEdge {
  # The item at the end of the edge
  node: Note

  # A cursor for use in pagination
  cursor: String!
}

enum NoteLogLevel {
  USER_MAJOR
  USER_MINOR
  AUTO_MAJOR
  AUTO_MINOR
  AUTO_DETAIL
}

# Container for arbitrary objects stored within a note
type NoteObject implements Node {
  # The ID of the object.
  id: ID!
  key: String
  type: String
  value: String
}

type NoteObjectConnection {
  pageInfo: PageInfo!
  edges: [NoteObjectEdge]!
}

type NoteObjectEdge {
  # The item at the end of the edge
  node: NoteObject

  # A cursor for use in pagination
  cursor: String!
}

input NoteObjectInput {
  key: String
  type: String
  value: String
}

# A type representing the owner of a LabBook or Dataset
type Owner implements Node, User {
  # The ID of the object.
  id: ID!
  username: String
}

type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  # The ID of the object
  node(id: ID!): Node
  labbook(owner: String, name: String): Labbook
  localLabbooks(before: String, after: String, first: Int, last: Int): LabbookConnection
  availableBaseImages(before: String, after: String, first: Int, last: Int): BaseImageConnection
  availableBaseImageVersions(repository: String, namespace: String, component: String, before: String, after: String, first: Int, last: Int): BaseImageConnection
}

input StartContainerInput {
  owner: String
  labbookName: String!
  clientMutationId: String
}

# Mutator to start a LabBook's Docker Image in a container
type StartContainerPayload {
  environment: Environment
  clientMutationId: String
}

# Interface representing a user in the system
interface User {
  username: String
}
