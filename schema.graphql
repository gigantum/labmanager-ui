# source: http://localhost:10001/labbook/
# timestamp: Mon Feb 05 2018 13:10:09 GMT-0500 (EST)

schema {
  query: LabbookQuery
  mutation: LabbookMutations
}

# A Connection for paging through activity Records
type ActivityConnection {
  pageInfo: PageInfo!
  edges: [ActivityEdge]!
}

# Container for Activity Detail Records#
type ActivityDetailObject implements Node, GitRepository {
  # The ID of the object.#
  id: ID!
  owner: String!
  name: String!
  key: String!
  data: [[String]]
  type: ActivityDetailType
  show: Boolean
  importance: Int
  tags: [String]
}

# Enumeration representing the type of Activity Detail Record#
enum ActivityDetailType {
  NOTE
  LABBOOK
  INPUT_DATA
  CODE
  CODE_EXECUTED
  RESULT
  OUTPUT_DATA
  ENVIRONMENT
}

type ActivityEdge {
  # The item at the end of the edge#
  node: ActivityRecordObject

  # A cursor for use in pagination#
  cursor: String!
}

# Container for Activity Records#
type ActivityRecordObject implements Node, GitRepository {
  # The ID of the object.#
  id: ID!
  owner: String!
  name: String!
  commit: String!
  linkedCommit: String
  message: String
  detailObjects: [ActivityDetailObject]
  type: ActivityType
  show: Boolean
  importance: Int
  tags: [String]
  timestamp: DateTime
}

# Enumeration representing the type of Activity Record#
enum ActivityType {
  NOTE
  ENVIRONMENT
  CODE
  INPUT_DATA
  OUTPUT_DATA
  MILESTONE
  BRANCH
  LABBOOK
}

input AddCustomComponentInput {
  owner: String!
  labbookName: String!
  repository: String!
  componentId: String!
  revision: Int!
  clientMutationId: String
}

# Mutation to add a new environment component to a LabBook#
type AddCustomComponentPayload {
  newCustomComponentEdge: CustomComponentEdge
  clientMutationId: String
}

input AddLabbookCollaboratorInput {
  owner: String!
  labbookName: String!
  username: String!
  clientMutationId: String
}

type AddLabbookCollaboratorPayload {
  updatedLabbook: Labbook
  clientMutationId: String
}

input AddLabbookFavoriteInput {
  owner: String!
  labbookName: String!
  section: String!
  key: String!
  description: String
  isDir: Boolean
  index: Int
  clientMutationId: String
}

type AddLabbookFavoritePayload {
  newFavoriteEdge: LabbookFavoriteEdge
  clientMutationId: String
}

input AddLabbookFileInput {
  owner: String!
  labbookName: String!
  section: String!
  filePath: String!
  chunkUploadParams: ChunkUploadInput!
  clientMutationId: String
}

# Mutation to add a file to a labbook. File should be sent in the `uploadFile` key as a multi-part/form upload.
# file_path is the relative path from the labbook section specified.
#
type AddLabbookFilePayload {
  newLabbookFileEdge: LabbookFileEdge
  clientMutationId: String
}

input AddLabbookRemoteInput {
  owner: String!
  labbookName: String!
  remoteName: String!
  remoteUrl: String!
  clientMutationId: String
}

type AddLabbookRemotePayload {
  success: Boolean
  clientMutationId: String
}

input AddPackageComponentInput {
  owner: String!
  labbookName: String!
  manager: String!
  package: String!
  version: String
  clientMutationId: String
}

# Mutation to add a new package to labbook#
type AddPackageComponentPayload {
  newPackageComponentEdge: PackageComponentEdge
  clientMutationId: String
}

# A type that represents a Base Image Environment Component#
type BaseComponent implements Node {
  # The ID of the object.#
  id: ID!
  schema: Int
  repository: String!
  componentId: String!
  revision: Int!
  name: String
  description: String
  readme: String
  tags: [String]
  icon: String
  osClass: String
  osRelease: String
  license: String
  url: String
  languages: [String]
  developmentTools: [String]
  packageManagers: [String]
  dockerImageServer: String
  dockerImageNamespace: String
  dockerImageRepository: String
  dockerImageTag: String
}

# A Connection for paging through Base components#
type BaseComponentConnection {
  pageInfo: PageInfo!
  edges: [BaseComponentEdge]!
}

type BaseComponentEdge {
  # The item at the end of the edge#
  node: BaseComponent

  # A cursor for use in pagination#
  cursor: String!
}

input BuildImageInput {
  owner: String!
  labbookName: String!
  clientMutationId: String
}

# Mutator to build a LabBook's Docker Image#
type BuildImagePayload {
  environment: Environment
  backgroundJobKey: String
  clientMutationId: String
}

input CheckoutBranchInput {
  owner: String!
  labbookName: String!
  branchName: String!
  clientMutationId: String
}

# Mutation checkout an existing branch branch#
type CheckoutBranchPayload {
  labbook: Labbook
  clientMutationId: String
}

# Input Object for params needed for a chunked upload

# To use, add a field `chunk_upload_params` to your mutation input
input ChunkUploadInput {
  fileSizeKb: Int!
  chunkSize: Int!
  totalChunks: Int!
  chunkIndex: Int!
  filename: String!
  uploadId: String!
}

# An enumeration for container image status#
enum ContainerStatus {
  NOT_RUNNING
  STARTING
  RUNNING
}

input CreateBranchInput {
  owner: String!
  labbookName: String!
  branchName: String!
  clientMutationId: String
}

# Mutation create a NEW branch for a LabBook LOCALLY#
type CreateBranchPayload {
  branch: LabbookRef
  clientMutationId: String
}

input CreateLabbookInput {
  name: String!
  description: String!
  repository: String!
  componentId: String!
  revision: Int!
  clientMutationId: String
}

# Mutation for creation of a new Labbook on disk#
type CreateLabbookPayload {
  labbook: Labbook
  clientMutationId: String
}

input CreateUserNoteInput {
  owner: String!
  labbookName: String!
  title: String!
  body: String
  tags: [String]
  clientMutationId: String
}

# Mutation to create a new user note entry in the activity feed of lab book

# The `linked_commit` is an empty string since there is no linked commit

type CreateUserNotePayload {
  newActivityRecordEdge: ActivityEdge
  clientMutationId: String
}

# A type that represents a Custom Dependency Environment Component#
type CustomComponent implements Node {
  # The ID of the object.#
  id: ID!
  schema: Int
  repository: String!
  componentId: String!
  revision: Int!
  name: String
  description: String
  tags: [String]
  license: String
  osBaseClass: String
  url: String
  requiredPackageManagers: [String]
  dockerSnippet: String
}

# A Connection for paging through Custom components#
type CustomComponentConnection {
  pageInfo: PageInfo!
  edges: [CustomComponentEdge]!
}

type CustomComponentEdge {
  # The item at the end of the edge#
  node: CustomComponent

  # A cursor for use in pagination#
  cursor: String!
}

# The `DateTime` scalar type represents a DateTime
# value as specified by
# [iso8601](https://en.wikipedia.org/wiki/ISO_8601).

scalar DateTime

input DeleteLabbookCollaboratorInput {
  owner: String!
  labbookName: String!
  username: String!
  clientMutationId: String
}

type DeleteLabbookCollaboratorPayload {
  updatedLabbook: Labbook
  clientMutationId: String
}

input DeleteLabbookFileInput {
  owner: String!
  labbookName: String!
  section: String!
  filePath: String!
  isDirectory: Boolean
  clientMutationId: String
}

type DeleteLabbookFilePayload {
  success: Boolean
  clientMutationId: String
}

# A type that represents the Environment for a LabBook#
type Environment implements Node, GitRepository {
  # The ID of the object.#
  id: ID!
  owner: String!
  name: String!
  imageStatus: ImageStatus
  containerStatus: ContainerStatus
  base: BaseComponent
  packageDependencies(before: String, after: String, first: Int, last: Int): PackageComponentConnection
  customDependencies(before: String, after: String, first: Int, last: Int): CustomComponentConnection
}

input ExportLabbookInput {
  owner: String!
  labbookName: String!
  clientMutationId: String
}

type ExportLabbookPayload {
  jobKey: String
  clientMutationId: String
}

# An interface for any object that is represented by a git commit#
interface GitCommit {
  hash: String!
  shortHash: String
  committedOn: String
}

# An interface for any git reference#
interface GitRef {
  refName: String!
  prefix: String
}

# An interface for Objects backended with git repositories (LabBook and Datasets)
#
interface GitRepository {
  owner: String!
  name: String!
}

# An enumeration for Docker image status#
enum ImageStatus {
  DOES_NOT_EXIST
  BUILD_IN_PROGRESS
  EXISTS
  STALE
  BUILD_FAILED
}

input ImportLabbookInput {
  chunkUploadParams: ChunkUploadInput!
  clientMutationId: String
}

type ImportLabbookPayload {
  importJobKey: String
  buildImageJobKey: String
  clientMutationId: String
}

input ImportRemoteLabbookInput {
  owner: String!
  labbookName: String!
  remoteUrl: String!
  clientMutationId: String
}

type ImportRemoteLabbookPayload {
  activeBranch: String
  clientMutationId: String
}

# A query to get the status of a background task launched with the Dispatcher
type JobStatus implements Node {
  # The ID of the object.#
  id: ID!
  jobKey: String
  status: String
  failureMessage: String
  startedAt: String
  finishedAt: String
  result: String
}

# A Connection for paging through all background jobs the system is aware of.
#
type JobStatusConnection {
  pageInfo: PageInfo!
  edges: [JobStatusEdge]!
}

type JobStatusEdge {
  # The item at the end of the edge#
  node: JobStatus

  # A cursor for use in pagination#
  cursor: String!
}

# A type representing a LabBook and all of its contents

# LabBooks are uniquely identified by both the "owner" and the "name" of the LabBook

type Labbook implements Node, GitRepository {
  # The ID of the object.#
  id: ID!
  owner: String!
  name: String!
  description: String
  schemaVersion: Int
  activeBranch: LabbookRef
  defaultRemote: String
  branches(before: String, after: String, first: Int, last: Int): LabbookRefConnection
  collaborators: [String]
  canManageCollaborators: Boolean
  updatesAvailableCount: Int
  isRepoClean: Boolean
  environment: Environment
  code: LabbookSection
  input: LabbookSection
  output: LabbookSection
  activityRecords(before: String, after: String, first: Int, last: Int): ActivityConnection
  detailRecord(key: String): ActivityDetailObject
  detailRecords(keys: [String]): [ActivityDetailObject]
}

# An object representing a commit to a LabBook#
type LabbookCommit implements Node, GitRepository, GitCommit {
  # The ID of the object.#
  id: ID!
  owner: String!
  name: String!
  hash: String!
  shortHash: String
  committedOn: String
}

# A Connection for paging through labbooks that exist locally. #
type LabbookConnection {
  pageInfo: PageInfo!
  edges: [LabbookEdge]!
}

type LabbookEdge {
  # The item at the end of the edge#
  node: Labbook

  # A cursor for use in pagination#
  cursor: String!
}

# A type representing a file or directory that has been favorited in the labbook file system.
#
type LabbookFavorite implements Node, GitRepository {
  # The ID of the object.#
  id: ID!
  owner: String!
  name: String!
  section: String!
  index: Int!
  key: String
  description: String
  isDir: Boolean
}

# A connection for paging through labbook favorites. #
type LabbookFavoriteConnection {
  pageInfo: PageInfo!
  edges: [LabbookFavoriteEdge]!
}

type LabbookFavoriteEdge {
  # The item at the end of the edge#
  node: LabbookFavorite

  # A cursor for use in pagination#
  cursor: String!
}

# A type representing a file or directory inside the labbook file system.
#
type LabbookFile implements Node, GitRepository {
  # The ID of the object.#
  id: ID!
  owner: String!
  name: String!
  section: String!
  key: String!
  isDir: Boolean
  isFavorite: Boolean
  modifiedAt: Int
  size: Int
}

# A connection for paging through labbook files. #
type LabbookFileConnection {
  pageInfo: PageInfo!
  edges: [LabbookFileEdge]!
}

type LabbookFileEdge {
  # The item at the end of the edge#
  node: LabbookFile

  # A cursor for use in pagination#
  cursor: String!
}

# Entry point for all graphql mutations#
type LabbookMutations {
  importLabbook(input: ImportLabbookInput!): ImportLabbookPayload
  importRemoteLabbook(input: ImportRemoteLabbookInput!): ImportRemoteLabbookPayload
  exportLabbook(input: ExportLabbookInput!): ExportLabbookPayload
  createLabbook(input: CreateLabbookInput!): CreateLabbookPayload
  renameLabbook(input: RenameLabbookInput!): RenameLabbookPayload
  publishLabbook(input: PublishLabbookInput!): PublishLabbookPayload
  syncLabbook(input: SyncLabbookInput!): SyncLabbookPayload
  createBranch(input: CreateBranchInput!): CreateBranchPayload
  checkoutBranch(input: CheckoutBranchInput!): CheckoutBranchPayload
  pullActiveBranchFromRemote(input: PullActiveBranchFromRemoteInput!): PullActiveBranchFromRemotePayload
  pushActiveBranchToRemote(input: PushActiveBranchToRemoteInput!): PushActiveBranchToRemotePayload
  addLabbookRemote(input: AddLabbookRemoteInput!): AddLabbookRemotePayload
  buildImage(input: BuildImageInput!): BuildImagePayload
  startContainer(input: StartContainerInput!): StartContainerPayload
  stopContainer(input: StopContainerInput!): StopContainerPayload
  createUserNote(input: CreateUserNoteInput!): CreateUserNotePayload
  addCustomComponent(input: AddCustomComponentInput!): AddCustomComponentPayload
  removeCustomComponent(input: RemoveCustomComponentInput!): RemoveCustomComponentPayload
  addPackageComponent(input: AddPackageComponentInput!): AddPackageComponentPayload
  removePackageComponent(input: RemovePackageComponentInput!): RemovePackageComponentPayload
  addLabbookFile(input: AddLabbookFileInput!): AddLabbookFilePayload
  moveLabbookFile(input: MoveLabbookFileInput!): MoveLabbookFilePayload
  deleteLabbookFile(input: DeleteLabbookFileInput!): DeleteLabbookFilePayload
  makeLabbookDirectory(input: MakeLabbookDirectoryInput!): MakeLabbookDirectoryPayload
  removeUserIdentity(input: RemoveUserIdentityInput!): RemoveUserIdentityPayload
  addFavorite(input: AddLabbookFavoriteInput!): AddLabbookFavoritePayload
  updateFavorite(input: UpdateLabbookFavoriteInput!): UpdateLabbookFavoritePayload
  removeFavorite(input: RemoveLabbookFavoriteInput!): RemoveLabbookFavoritePayload
  addCollaborator(input: AddLabbookCollaboratorInput!): AddLabbookCollaboratorPayload
  deleteCollaborator(input: DeleteLabbookCollaboratorInput!): DeleteLabbookCollaboratorPayload
}

# Entry point for all LabBook queryable fields#
type LabbookQuery {
  # The ID of the object#
  node(id: ID!): Node
  buildInfo: String
  labbook(owner: String, name: String): Labbook
  currentLabbookSchemaVersion: Int
  jobStatus(jobId: String): JobStatus
  backgroundJobs(before: String, after: String, first: Int, last: Int): JobStatusConnection
  localLabbooks(before: String, after: String, first: Int, last: Int): LabbookConnection
  availableBases(before: String, after: String, first: Int, last: Int): BaseComponentConnection
  availableCustomDependencies(before: String, after: String, first: Int, last: Int): CustomComponentConnection
  package(manager: String, package: String, version: String = ""): PackageComponent
  userIdentity: UserIdentity
}

# An object representing a git reference in a LabBook repository#
type LabbookRef implements Node, GitRepository, GitRef {
  # The ID of the object.#
  id: ID!
  owner: String!
  name: String!
  refName: String!
  prefix: String
  commit: LabbookCommit
}

# A Connection for paging through labbook git refs (branches)#
type LabbookRefConnection {
  pageInfo: PageInfo!
  edges: [LabbookRefEdge]!
}

type LabbookRefEdge {
  # The item at the end of the edge#
  node: LabbookRef

  # A cursor for use in pagination#
  cursor: String!
}

# A type representing a section within a LabBook (i.e., code, input, output)

#
type LabbookSection implements Node, GitRepository {
  # The ID of the object.#
  id: ID!
  owner: String!
  name: String!
  section: String
  files(rootDir: String, before: String, after: String, first: Int, last: Int): LabbookFileConnection
  allFiles(before: String, after: String, first: Int, last: Int): LabbookFileConnection
  favorites(before: String, after: String, first: Int, last: Int): LabbookFavoriteConnection
}

input MakeLabbookDirectoryInput {
  owner: String!
  labbookName: String!
  section: String!
  directory: String!
  clientMutationId: String
}

type MakeLabbookDirectoryPayload {
  newLabbookFileEdge: LabbookFileEdge
  clientMutationId: String
}

input MoveLabbookFileInput {
  owner: String!
  labbookName: String!
  section: String!
  srcPath: String!
  dstPath: String!
  clientMutationId: String
}

# Method to move/rename a file or directory. If file, both src_path and dst_path should contain the file name.
# If a directory, be sure to include the trailing slash
#
type MoveLabbookFilePayload {
  newLabbookFileEdge: LabbookFileEdge
  clientMutationId: String
}

# An object with an ID#
interface Node {
  # The ID of the object.#
  id: ID!
}

# A type that represents a Package Manager based Environment Component#
type PackageComponent implements Node {
  # The ID of the object.#
  id: ID!
  schema: Int
  manager: String!
  package: String!
  version: String!
  latestVersion: String
  fromBase: Boolean
}

# A Connection for paging through Package components#
type PackageComponentConnection {
  pageInfo: PageInfo!
  edges: [PackageComponentEdge]!
}

type PackageComponentEdge {
  # The item at the end of the edge#
  node: PackageComponent

  # A cursor for use in pagination#
  cursor: String!
}

type PageInfo {
  # When paginating forwards, are there more items?#
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?#
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.#
  startCursor: String

  # When paginating forwards, the cursor to continue.#
  endCursor: String
}

input PublishLabbookInput {
  owner: String!
  labbookName: String!
  clientMutationId: String
}

type PublishLabbookPayload {
  success: Boolean
  clientMutationId: String
}

input PullActiveBranchFromRemoteInput {
  owner: String!
  labbookName: String!
  remoteName: String
  clientMutationId: String
}

type PullActiveBranchFromRemotePayload {
  success: Boolean
  clientMutationId: String
}

input PushActiveBranchToRemoteInput {
  owner: String!
  labbookName: String!
  remoteName: String
  clientMutationId: String
}

type PushActiveBranchToRemotePayload {
  success: Boolean
  clientMutationId: String
}

input RemoveCustomComponentInput {
  owner: String!
  labbookName: String!
  repository: String!
  componentId: String!
  clientMutationId: String
}

# Mutation to remove an environment component to a LabBook#
type RemoveCustomComponentPayload {
  success: Boolean
  clientMutationId: String
}

input RemoveLabbookFavoriteInput {
  owner: String!
  labbookName: String!
  section: String!
  index: Int!
  clientMutationId: String
}

type RemoveLabbookFavoritePayload {
  success: Boolean
  clientMutationId: String
}

input RemovePackageComponentInput {
  owner: String!
  labbookName: String!
  manager: String!
  package: String!
  clientMutationId: String
}

# Mutation to remove a package from labbook#
type RemovePackageComponentPayload {
  success: Boolean
  clientMutationId: String
}

input RemoveUserIdentityInput {
  clientMutationId: String
}

# Mutation to remove a locally stored user identity (no-op if not running in local mode)
#
type RemoveUserIdentityPayload {
  userIdentityEdge: UserIdentity
  clientMutationId: String
}

input RenameLabbookInput {
  owner: String!
  originalLabbookName: String!
  newLabbookName: String!
  clientMutationId: String
}

# Rename a labbook#
type RenameLabbookPayload {
  success: Boolean
  clientMutationId: String
}

input StartContainerInput {
  owner: String!
  labbookName: String!
  clientMutationId: String
}

# Mutator to start a LabBook's Docker Image in a container#
type StartContainerPayload {
  environment: Environment
  backgroundJobKey: String
  clientMutationId: String
}

input StopContainerInput {
  owner: String!
  labbookName: String!
  clientMutationId: String
}

# Mutation to stop a Docker container. #
type StopContainerPayload {
  environment: Environment
  backgroundJobKey: String
  clientMutationId: String
}

input SyncLabbookInput {
  owner: String!
  labbookName: String!
  clientMutationId: String
}

type SyncLabbookPayload {
  updateCount: Int
  clientMutationId: String
}

input UpdateLabbookFavoriteInput {
  owner: String!
  labbookName: String!
  section: String!
  index: Int!
  updatedIndex: Int
  updatedKey: String
  updatedDescription: String
  clientMutationId: String
}

type UpdateLabbookFavoritePayload {
  updatedFavoriteEdge: LabbookFavoriteEdge
  clientMutationId: String
}

# Interface representing a user in the system#
interface User {
  username: String
  email: String
  givenName: String
  familyName: String
}

# A type representing the identity of the logged in user#
type UserIdentity implements Node, User {
  # The ID of the object.#
  id: ID!
  username: String
  email: String
  givenName: String
  familyName: String
}
