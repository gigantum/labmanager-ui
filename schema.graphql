# source: http://localhost:10000/api/labbook/
# timestamp: Tue Sep 11 2018 15:22:46 GMT-0400 (EDT)

schema {
  query: LabbookQuery
  mutation: LabbookMutations
}

"""Enumeration representing the modifiers on Activity Detail Records"""
enum ActivityAction {
  NOACTION
  CREATE
  EDIT
  DELETE
  EXECUTE
}

"""A Connection for paging through activity recrods"""
type ActivityConnection {
  pageInfo: PageInfo!
  edges: [ActivityEdge]!
}

"""Container for Activity Detail Records"""
type ActivityDetailObject implements Node & GitRepository {
  """The ID of the object."""
  id: ID!
  owner: String!
  name: String!
  key: String!
  data: [[String]]
  type: ActivityDetailType
  action: ActivityAction
  show: Boolean
  importance: Int
  tags: [String]
}

"""Enumeration representing the type of Activity Detail Record"""
enum ActivityDetailType {
  NOTE
  LABBOOK
  INPUT_DATA
  CODE
  CODE_EXECUTED
  RESULT
  OUTPUT_DATA
  ENVIRONMENT
}

type ActivityEdge {
  """The item at the end of the edge"""
  node: ActivityRecordObject

  """A cursor for use in pagination"""
  cursor: String!
}

"""Container for Activity Records"""
type ActivityRecordObject implements Node & GitRepository {
  """The ID of the object."""
  id: ID!
  owner: String!
  name: String!
  commit: String!
  linkedCommit: String
  message: String
  detailObjects: [ActivityDetailObject]
  type: ActivityType
  show: Boolean
  importance: Int
  tags: [String]
  timestamp: DateTime
  username: String
  email: String
}

"""Enumeration representing the type of Activity Record"""
enum ActivityType {
  NOTE
  ENVIRONMENT
  CODE
  INPUT_DATA
  OUTPUT_DATA
  MILESTONE
  BRANCH
  LABBOOK
}

input AddCustomComponentInput {
  owner: String!
  labbookName: String!
  repository: String!
  componentId: String!
  revision: Int!
  clientMutationId: String
}

"""Mutation to add a new environment component to a LabBook"""
type AddCustomComponentPayload {
  newCustomComponentEdge: CustomComponentEdge
  clientMutationId: String
}

input AddCustomDockerInput {
  owner: String!
  labbookName: String!
  dockerContent: String!
  clientMutationId: String
}

type AddCustomDockerPayload {
  updatedEnvironment: Environment
  clientMutationId: String
}

input AddLabbookCollaboratorInput {
  owner: String!
  labbookName: String!
  username: String!
  clientMutationId: String
}

type AddLabbookCollaboratorPayload {
  updatedLabbook: Labbook
  clientMutationId: String
}

input AddLabbookFavoriteInput {
  owner: String!
  labbookName: String!
  section: String!
  key: String!
  description: String
  isDir: Boolean
  clientMutationId: String
}

type AddLabbookFavoritePayload {
  newFavoriteEdge: LabbookFavoriteEdge
  clientMutationId: String
}

input AddLabbookFileInput {
  owner: String!
  labbookName: String!
  section: String!
  filePath: String!
  chunkUploadParams: ChunkUploadInput!
  transactionId: String!
  clientMutationId: String
}

"""
Mutation to add a file to a labbook. File should be sent in the
`uploadFile` key as a multi-part/form upload.
file_path is the relative path from the labbook section specified.
"""
type AddLabbookFilePayload {
  newLabbookFileEdge: LabbookFileEdge
  clientMutationId: String
}

input AddLabbookRemoteInput {
  owner: String!
  labbookName: String!
  remoteName: String!
  remoteUrl: String!
  clientMutationId: String
}

type AddLabbookRemotePayload {
  success: Boolean
  clientMutationId: String
}

input AddPackageComponentsInput {
  owner: String!
  labbookName: String!
  packages: [PackageComponentInput]
  clientMutationId: String
}

"""
Mutation to add or update packages to labbook

You MUST have previously validated the package information or errors can occur at build time.
You MUST include a version, since auto-addition of a package version is done during validation.
"""
type AddPackageComponentsPayload {
  newPackageComponentEdges: [PackageComponentEdge]
  clientMutationId: String
}

"""A type that represents a Base Image Environment Component"""
type BaseComponent implements Node {
  """The ID of the object."""
  id: ID!
  schema: Int
  repository: String!
  componentId: String!
  revision: Int!
  name: String
  description: String
  readme: String
  tags: [String]
  icon: String
  osClass: String
  osRelease: String
  license: String
  url: String
  languages: [String]
  developmentTools: [String]
  packageManagers: [String]
  installedPackages: [String]
  dockerImageServer: String
  dockerImageNamespace: String
  dockerImageRepository: String
  dockerImageTag: String
}

"""A Connection for paging through Base components"""
type BaseComponentConnection {
  pageInfo: PageInfo!
  edges: [BaseComponentEdge]!
}

type BaseComponentEdge {
  """The item at the end of the edge"""
  node: BaseComponent

  """A cursor for use in pagination"""
  cursor: String!
}

input BuildImageInput {
  owner: String!
  labbookName: String!
  noCache: Boolean
  clientMutationId: String
}

"""Mutator to build a LabBook's Docker Image"""
type BuildImagePayload {
  environment: Environment
  backgroundJobKey: String
  clientMutationId: String
}

input CheckoutBranchInput {
  owner: String!
  labbookName: String!
  branchName: String!
  clientMutationId: String
}

"""Mutation checkout an existing branch branch"""
type CheckoutBranchPayload {
  labbook: Labbook
  clientMutationId: String
}

"""
Input Object for params needed for a chunked upload

To use, add a field `chunk_upload_params` to your mutation input
"""
input ChunkUploadInput {
  fileSizeKb: Int!
  chunkSize: Int!
  totalChunks: Int!
  chunkIndex: Int!
  filename: String!
  uploadId: String!
}

input CompleteBatchUploadTransactionInput {
  owner: String!
  labbookName: String!
  transactionId: String!
  cancel: Boolean
  rollback: Boolean
  clientMutationId: String
}

type CompleteBatchUploadTransactionPayload {
  success: Boolean
  clientMutationId: String
}

"""An enumeration for container image status"""
enum ContainerStatus {
  NOT_RUNNING
  STARTING
  RUNNING
}

input CreateBranchInput {
  owner: String!
  labbookName: String!
  branchName: String!
  clientMutationId: String
}

"""Mutation create a NEW branch for a LabBook LOCALLY"""
type CreateBranchPayload {
  branch: LabbookRef
  clientMutationId: String
}

input CreateExperimentalBranchInput {
  owner: String!
  labbookName: String!
  branchName: String!
  revision: String
  description: String
  clientMutationId: String
}

"""Mutation to create a local experimental (or Rollback) branch. """
type CreateExperimentalBranchPayload {
  labbook: Labbook
  clientMutationId: String
}

input CreateLabbookInput {
  name: String!
  description: String!
  repository: String!
  componentId: String!
  revision: Int!
  isUntracked: Boolean
  clientMutationId: String
}

"""Mutation for creation of a new Labbook on disk"""
type CreateLabbookPayload {
  labbook: Labbook
  clientMutationId: String
}

input CreateUserNoteInput {
  owner: String!
  labbookName: String!
  title: String!
  body: String
  tags: [String]
  clientMutationId: String
}

"""
Mutation to create a new user note entry in the activity feed of lab book

The `linked_commit` is an empty string since there is no linked commit
"""
type CreateUserNotePayload {
  newActivityRecordEdge: ActivityEdge
  clientMutationId: String
}

"""A type that represents a Custom Dependency Environment Component"""
type CustomComponent implements Node {
  """The ID of the object."""
  id: ID!
  schema: Int
  repository: String!
  componentId: String!
  revision: Int!
  name: String
  description: String
  tags: [String]
  license: String
  osBaseClass: String
  url: String
  requiredPackageManagers: [String]
  dockerSnippet: String
}

"""A Connection for paging through Custom components"""
type CustomComponentConnection {
  pageInfo: PageInfo!
  edges: [CustomComponentEdge]!
}

type CustomComponentEdge {
  """The item at the end of the edge"""
  node: CustomComponent

  """A cursor for use in pagination"""
  cursor: String!
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

input DeleteExperimentalBranchInput {
  owner: String!
  labbookName: String!
  branchName: String!
  clientMutationId: String
}

"""Delete a feature/rollback branch. Fails for any other attempt."""
type DeleteExperimentalBranchPayload {
  success: Boolean
  clientMutationId: String
}

input DeleteLabbookCollaboratorInput {
  owner: String!
  labbookName: String!
  username: String!
  clientMutationId: String
}

type DeleteLabbookCollaboratorPayload {
  updatedLabbook: Labbook
  clientMutationId: String
}

input DeleteLabbookFileInput {
  owner: String!
  labbookName: String!
  section: String!
  filePath: String!
  isDirectory: Boolean
  clientMutationId: String
}

type DeleteLabbookFilePayload {
  success: Boolean
  clientMutationId: String
}

input DeleteLabbookInput {
  owner: String!
  labbookName: String!
  confirm: Boolean!
  clientMutationId: String
}

"""Delete a labbook from disk. """
type DeleteLabbookPayload {
  success: Boolean
  clientMutationId: String
}

input DeleteRemoteLabbookInput {
  owner: String!
  labbookName: String!
  confirm: Boolean!
  clientMutationId: String
}

"""Delete a labbook from the remote repository."""
type DeleteRemoteLabbookPayload {
  success: Boolean
  clientMutationId: String
}

"""A type that represents the Environment for a LabBook"""
type Environment implements Node & GitRepository {
  """The ID of the object."""
  id: ID!
  owner: String!
  name: String!
  imageStatus: ImageStatus
  containerStatus: ContainerStatus
  base: BaseComponent
  packageDependencies(before: String, after: String, first: Int, last: Int): PackageComponentConnection
  customDependencies(before: String, after: String, first: Int, last: Int): CustomComponentConnection @deprecated(reason: "Custom Dependencies have been replaced with custom docker interface")
  dockerSnippet: String
}

input ExportLabbookInput {
  owner: String!
  labbookName: String!
  clientMutationId: String
}

type ExportLabbookPayload {
  jobKey: String
  clientMutationId: String
}

"""An interface for any object that is represented by a git commit"""
interface GitCommit {
  hash: String!
  shortHash: String
  committedOn: String
}

"""An interface for any git reference"""
interface GitRef {
  refName: String!
  prefix: String
}

"""
An interface for Objects backended with git repositories (LabBook and Datasets)
"""
interface GitRepository {
  owner: String!
  name: String!
}

"""An enumeration for Docker image status"""
enum ImageStatus {
  DOES_NOT_EXIST
  BUILD_IN_PROGRESS
  BUILD_QUEUED
  EXISTS
  STALE
  BUILD_FAILED
}

input ImportLabbookInput {
  chunkUploadParams: ChunkUploadInput!
  clientMutationId: String
}

type ImportLabbookPayload {
  importJobKey: String
  buildImageJobKey: String
  clientMutationId: String
}

input ImportRemoteLabbookInput {
  owner: String!
  labbookName: String!
  remoteUrl: String!
  clientMutationId: String
}

type ImportRemoteLabbookPayload {
  newLabbookEdge: LabbookEdge
  clientMutationId: String
}

"""
A query to get the status of a background task launched with the Dispatcher
"""
type JobStatus implements Node {
  """The ID of the object."""
  id: ID!
  jobKey: String
  status: String
  jobMetadata: String
  failureMessage: String
  startedAt: String
  finishedAt: String
  result: String
}

"""
A Connection for paging through all background jobs the system is aware of. 
"""
type JobStatusConnection {
  pageInfo: PageInfo!
  edges: [JobStatusEdge]!
}

type JobStatusEdge {
  """The item at the end of the edge"""
  node: JobStatus

  """A cursor for use in pagination"""
  cursor: String!
}

"""
A type representing a LabBook and all of its contents

LabBooks are uniquely identified by both the "owner" and the "name" of the LabBook
"""
type Labbook implements Node & GitRepository {
  """The ID of the object."""
  id: ID!
  owner: String!
  name: String!
  description: String
  readme: String
  schemaVersion: Int
  sizeBytes: String
  activeBranchName: String
  workspaceBranchName: String
  availableBranchNames: [String]
  mergeableBranchNames: [String]
  activeBranch: LabbookRef @deprecated(reason: "Can use workspaceBranchName instead")
  branches(before: String, after: String, first: Int, last: Int): LabbookRefConnection @deprecated(reason: "Can use availableBranchNames instead")
  defaultRemote: String
  creationDateUtc: DateTime
  collaborators: [String]
  canManageCollaborators: Boolean
  updatesAvailableCount: Int
  isRepoClean: Boolean
  environment: Environment
  overview: LabbookOverview
  code: LabbookSection
  input: LabbookSection
  output: LabbookSection
  activityRecords(before: String, after: String, first: Int, last: Int): ActivityConnection
  detailRecord(key: String): ActivityDetailObject
  detailRecords(keys: [String]): [ActivityDetailObject]
  backgroundJobs: [JobStatus]
  packages(packageInput: [PackageComponentInput]): [PackageComponent]
  visibility: String
}

"""An object representing a commit to a LabBook"""
type LabbookCommit implements Node & GitRepository & GitCommit {
  """The ID of the object."""
  id: ID!
  owner: String!
  name: String!
  hash: String!
  shortHash: String
  committedOn: String
}

"""A Connection for paging through labbooks that exist locally. """
type LabbookConnection {
  pageInfo: PageInfo!
  edges: [LabbookEdge]!
}

type LabbookEdge {
  """The item at the end of the edge"""
  node: Labbook

  """A cursor for use in pagination"""
  cursor: String!
}

"""
A type representing a file or directory that has been favorited in the labbook file system.
"""
type LabbookFavorite implements Node & GitRepository {
  """The ID of the object."""
  id: ID!
  owner: String!
  name: String!
  section: String!
  key: String!
  index: Int
  description: String
  associatedLabbookFileId: String
  isDir: Boolean
}

"""A connection for paging through labbook favorites. """
type LabbookFavoriteConnection {
  pageInfo: PageInfo!
  edges: [LabbookFavoriteEdge]!
}

type LabbookFavoriteEdge {
  """The item at the end of the edge"""
  node: LabbookFavorite

  """A cursor for use in pagination"""
  cursor: String!
}

"""
A type representing a file or directory inside the labbook file system.
"""
type LabbookFile implements Node & GitRepository {
  """The ID of the object."""
  id: ID!
  owner: String!
  name: String!
  section: String!
  key: String!
  isDir: Boolean
  isFavorite: Boolean
  modifiedAt: Int
  size: String
}

"""A connection for paging through labbook files. """
type LabbookFileConnection {
  pageInfo: PageInfo!
  edges: [LabbookFileEdge]!
}

type LabbookFileEdge {
  """The item at the end of the edge"""
  node: LabbookFile

  """A cursor for use in pagination"""
  cursor: String!
}

"""
A type simply used as a container to group local and remote LabBooks for better relay support

Labbook and RemoteLabbook objects are uniquely identified by both the "owner" and the "name" of the LabBook

NOTE: RemoteLabbooks require all fields to be explicitly set as there is no current way to asynchronously retrieve
      the data

NOTE: Currently all RemoteLabbook description fields will return empty strings
"""
type LabbookList implements Node {
  """The ID of the object."""
  id: ID!
  localById(ids: [String]): [Labbook]
  localLabbooks(orderBy: String = "name", sort: String = "asc", before: String, after: String, first: Int, last: Int): LabbookConnection
  remoteLabbooks(orderBy: String = "name", sort: String = "asc", before: String, after: String, first: Int, last: Int): RemoteLabbookConnection
}

"""Entry point for all graphql mutations"""
type LabbookMutations {
  importLabbook(input: ImportLabbookInput!): ImportLabbookPayload
  importRemoteLabbook(input: ImportRemoteLabbookInput!): ImportRemoteLabbookPayload
  exportLabbook(input: ExportLabbookInput!): ExportLabbookPayload
  createLabbook(input: CreateLabbookInput!): CreateLabbookPayload
  deleteLabbook(input: DeleteLabbookInput!): DeleteLabbookPayload
  deleteRemoteLabbook(input: DeleteRemoteLabbookInput!): DeleteRemoteLabbookPayload
  setLabbookDescription(input: SetLabbookDescriptionInput!): SetLabbookDescriptionPayload
  publishLabbook(input: PublishLabbookInput!): PublishLabbookPayload
  syncLabbook(input: SyncLabbookInput!): SyncLabbookPayload
  createBranch(input: CreateBranchInput!): CreateBranchPayload
  checkoutBranch(input: CheckoutBranchInput!): CheckoutBranchPayload
  addLabbookRemote(input: AddLabbookRemoteInput!): AddLabbookRemotePayload
  buildImage(input: BuildImageInput!): BuildImagePayload
  startContainer(input: StartContainerInput!): StartContainerPayload
  stopContainer(input: StopContainerInput!): StopContainerPayload
  startDevTool(input: StartDevToolInput!): StartDevToolPayload
  createUserNote(input: CreateUserNoteInput!): CreateUserNotePayload
  addCustomComponent(input: AddCustomComponentInput!): AddCustomComponentPayload
  removeCustomComponent(input: RemoveCustomComponentInput!): RemoveCustomComponentPayload
  addPackageComponents(input: AddPackageComponentsInput!): AddPackageComponentsPayload
  removePackageComponents(input: RemovePackageComponentsInput!): RemovePackageComponentsPayload
  addCustomDocker(input: AddCustomDockerInput!): AddCustomDockerPayload
  removeCustomDocker(input: RemoveCustomDockerInput!): RemoveCustomDockerPayload
  addLabbookFile(input: AddLabbookFileInput!): AddLabbookFilePayload
  completeBatchUploadTransaction(input: CompleteBatchUploadTransactionInput!): CompleteBatchUploadTransactionPayload
  moveLabbookFile(input: MoveLabbookFileInput!): MoveLabbookFilePayload
  deleteLabbookFile(input: DeleteLabbookFileInput!): DeleteLabbookFilePayload
  makeLabbookDirectory(input: MakeLabbookDirectoryInput!): MakeLabbookDirectoryPayload
  removeUserIdentity(input: RemoveUserIdentityInput!): RemoveUserIdentityPayload
  addFavorite(input: AddLabbookFavoriteInput!): AddLabbookFavoritePayload
  updateFavorite(input: UpdateLabbookFavoriteInput!): UpdateLabbookFavoritePayload
  removeFavorite(input: RemoveLabbookFavoriteInput!): RemoveLabbookFavoritePayload
  addCollaborator(input: AddLabbookCollaboratorInput!): AddLabbookCollaboratorPayload
  deleteCollaborator(input: DeleteLabbookCollaboratorInput!): DeleteLabbookCollaboratorPayload
  writeReadme(input: WriteReadmeInput!): WriteReadmePayload
  createExperimentalBranch(input: CreateExperimentalBranchInput!): CreateExperimentalBranchPayload
  deleteExperimentalBranch(input: DeleteExperimentalBranchInput!): DeleteExperimentalBranchPayload
  mergeFromBranch(input: MergeFromBranchInput!): MergeFromBranchPayload
  workonExperimentalBranch(input: WorkonBranchInput!): WorkonBranchPayload
  setVisibility(input: SetVisibilityInput!): SetVisibilityPayload
}

"""
A type representing the overview of a LabBook

It contains counts for all package managers, the last 3 activity records with show=True
"""
type LabbookOverview implements Node & GitRepository {
  """The ID of the object."""
  id: ID!
  owner: String!
  name: String!
  numAptPackages: Int
  numConda2Packages: Int
  numConda3Packages: Int
  numPipPackages: Int
  numCustomDependencies: Int
  recentActivity: [ActivityRecordObject]
  remoteUrl: String
}

"""Entry point for all LabBook queryable fields"""
type LabbookQuery {
  """The ID of the object"""
  node(id: ID!): Node
  buildInfo: String
  cudaAvailable: Boolean
  labbook(owner: String, name: String): Labbook
  currentLabbookSchemaVersion: Int
  jobStatus(jobId: String): JobStatus
  backgroundJobs(before: String, after: String, first: Int, last: Int): JobStatusConnection
  labbookList: LabbookList
  availableBases(before: String, after: String, first: Int, last: Int): BaseComponentConnection
  availableCustomDependencies(before: String, after: String, first: Int, last: Int): CustomComponentConnection
  package(manager: String, package: String, version: String = ""): PackageComponent
  userIdentity: UserIdentity
}

"""An object representing a git reference in a LabBook repository"""
type LabbookRef implements Node & GitRepository & GitRef {
  """The ID of the object."""
  id: ID!
  owner: String!
  name: String!
  refName: String!
  prefix: String
  commit: LabbookCommit
}

"""A Connection for paging through labbook git refs (branches)"""
type LabbookRefConnection {
  pageInfo: PageInfo!
  edges: [LabbookRefEdge]!
}

type LabbookRefEdge {
  """The item at the end of the edge"""
  node: LabbookRef

  """A cursor for use in pagination"""
  cursor: String!
}

"""
A type representing a section within a LabBook (i.e., code, input, output)
    
"""
type LabbookSection implements Node & GitRepository {
  """The ID of the object."""
  id: ID!
  owner: String!
  name: String!
  section: String
  files(rootDir: String, before: String, after: String, first: Int, last: Int): LabbookFileConnection
  allFiles(before: String, after: String, first: Int, last: Int): LabbookFileConnection
  favorites(before: String, after: String, first: Int, last: Int): LabbookFavoriteConnection
  isUntracked: Boolean
}

input MakeLabbookDirectoryInput {
  owner: String!
  labbookName: String!
  section: String!
  directory: String!
  clientMutationId: String
}

type MakeLabbookDirectoryPayload {
  newLabbookFileEdge: LabbookFileEdge
  clientMutationId: String
}

input MergeFromBranchInput {
  owner: String!
  labbookName: String!
  otherBranchName: String!
  force: Boolean
  clientMutationId: String
}

"""
Merge from another branch into the current active branch. Force if necessary. 
"""
type MergeFromBranchPayload {
  labbook: Labbook
  clientMutationId: String
}

input MoveLabbookFileInput {
  owner: String!
  labbookName: String!
  section: String!
  srcPath: String!
  dstPath: String!
  clientMutationId: String
}

"""
Method to move/rename a file or directory. If file, both src_path and dst_path should contain the file name.
If a directory, be sure to include the trailing slash
"""
type MoveLabbookFilePayload {
  newLabbookFileEdge: LabbookFileEdge
  clientMutationId: String
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

"""A type that represents a Package Manager based Environment Component"""
type PackageComponent implements Node {
  """The ID of the object."""
  id: ID!
  schema: Int
  manager: String!
  package: String!
  version: String!
  latestVersion: String
  fromBase: Boolean
  isValid: Boolean
}

"""A Connection for paging through Package components"""
type PackageComponentConnection {
  pageInfo: PageInfo!
  edges: [PackageComponentEdge]!
}

type PackageComponentEdge {
  """The item at the end of the edge"""
  node: PackageComponent

  """A cursor for use in pagination"""
  cursor: String!
}

"""An input type to support Batch interfaces that use Package Components"""
input PackageComponentInput {
  manager: String!
  package: String!
  version: String
}

type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

input PublishLabbookInput {
  owner: String!
  labbookName: String!
  setPublic: Boolean
  clientMutationId: String
}

type PublishLabbookPayload {
  jobKey: String
  clientMutationId: String
}

"""
A type representing a LabBook stored on a remote server

RemoteLabbooks are uniquely identified by both the "owner" and the "name" of the LabBook

NOTE: RemoteLabbooks require all fields to be explicitly set as there is no current way to asynchronously retrieve
      the data

NOTE: Currently all description fields will return empty strings
"""
type RemoteLabbook implements Node & GitRepository {
  """The ID of the object."""
  id: ID!
  owner: String!
  name: String!
  description: String
  visibility: String
  creationDateUtc: String
  modifiedDateUtc: String
  isLocal: Boolean
}

"""
A Connection for paging through remote labbooks.

This is a remote call, so should be fetched on its own and only when needed. The user must have a valid
session for data to be returned.

It is recommended to use large page size (e.g. 50-100). This is due to how the remote server returns all the
available data at once, so it is more efficient to load a lot of records at a time.

Supported sorting modes:
    - az: naturally sort
    - created_on: sort by creation date, newest first
    - modified_on: sort by modification date, newest first
"""
type RemoteLabbookConnection {
  pageInfo: PageInfo!
  edges: [RemoteLabbookEdge]!
}

type RemoteLabbookEdge {
  """The item at the end of the edge"""
  node: RemoteLabbook

  """A cursor for use in pagination"""
  cursor: String!
}

input RemoveCustomComponentInput {
  owner: String!
  labbookName: String!
  repository: String!
  componentId: String!
  clientMutationId: String
}

"""Mutation to remove an environment component to a LabBook"""
type RemoveCustomComponentPayload {
  success: Boolean
  clientMutationId: String
}

input RemoveCustomDockerInput {
  owner: String!
  labbookName: String!
  clientMutationId: String
}

type RemoveCustomDockerPayload {
  updatedEnvironment: Environment
  clientMutationId: String
}

input RemoveLabbookFavoriteInput {
  owner: String!
  labbookName: String!
  section: String!
  key: String!
  clientMutationId: String
}

type RemoveLabbookFavoritePayload {
  success: Boolean
  removedNodeId: String
  clientMutationId: String
}

input RemovePackageComponentsInput {
  owner: String!
  labbookName: String!
  manager: String!
  packages: [String]!
  clientMutationId: String
}

"""Mutation to remove packages from labbook"""
type RemovePackageComponentsPayload {
  success: Boolean
  clientMutationId: String
}

input RemoveUserIdentityInput {
  clientMutationId: String
}

"""
Mutation to remove a locally stored user identity (no-op if not running in local mode)
"""
type RemoveUserIdentityPayload {
  userIdentityEdge: UserIdentity
  clientMutationId: String
}

input SetLabbookDescriptionInput {
  owner: String!
  labbookName: String!
  descriptionContent: String!
  clientMutationId: String
}

type SetLabbookDescriptionPayload {
  success: Boolean
  clientMutationId: String
}

input SetVisibilityInput {
  owner: String!
  labbookName: String!
  visibility: String!
  clientMutationId: String
}

type SetVisibilityPayload {
  newLabbookEdge: LabbookEdge
  clientMutationId: String
}

input StartContainerInput {
  owner: String!
  labbookName: String!
  clientMutationId: String
}

"""Mutator to start a LabBook's Docker Image in a container"""
type StartContainerPayload {
  environment: Environment
  clientMutationId: String
}

input StartDevToolInput {
  owner: String!
  labbookName: String!
  devTool: String!
  containerOverrideId: String
  clientMutationId: String
}

type StartDevToolPayload {
  path: String
  clientMutationId: String
}

input StopContainerInput {
  owner: String!
  labbookName: String!
  clientMutationId: String
}

"""Mutation to stop a Docker container. """
type StopContainerPayload {
  environment: Environment
  clientMutationId: String
}

input SyncLabbookInput {
  owner: String!
  labbookName: String!
  force: Boolean
  clientMutationId: String
}

type SyncLabbookPayload {
  jobKey: String
  clientMutationId: String
}

input UpdateLabbookFavoriteInput {
  owner: String!
  labbookName: String!
  section: String!
  key: String!
  updatedIndex: Int
  updatedDescription: String
  clientMutationId: String
}

type UpdateLabbookFavoritePayload {
  updatedFavoriteEdge: LabbookFavoriteEdge
  clientMutationId: String
}

"""Interface representing a user in the system"""
interface User {
  username: String
  email: String
  givenName: String
  familyName: String
}

"""A type representing the identity of the logged in user"""
type UserIdentity implements Node & User {
  """The ID of the object."""
  id: ID!
  username: String
  email: String
  givenName: String
  familyName: String
  isSessionValid: Boolean
}

input WorkonBranchInput {
  owner: String!
  labbookName: String!
  branchName: String!
  revision: String
  clientMutationId: String
}

"""Work on another branch (perform a git checkout)."""
type WorkonBranchPayload {
  labbook: Labbook
  clientMutationId: String
}

input WriteReadmeInput {
  owner: String!
  labbookName: String!
  content: String!
  clientMutationId: String
}

type WriteReadmePayload {
  updatedLabbook: Labbook
  clientMutationId: String
}
