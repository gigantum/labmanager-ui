// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test create history has a replace method 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="Dashboard flex flex-column"
>
    <div
        className="Dashboard__view flex-1-0-auto"
    >
        <ReactRelayQueryRenderer
            environment={
                RelayModernEnvironment {
                    "_network": Object {
                      "fetch": [Function],
                      "request": [Function],
                      "requestStream": [Function],
                    },
                    "_publishQueue": RelayPublishQueue {
                      "_appliedOptimisticUpdates": Set {},
                      "_backup": Object {},
                      "_handlerProvider": [Function],
                      "_pendingBackupRebase": false,
                      "_pendingOptimisticUpdates": Set {},
                      "_pendingPayloads": Set {},
                      "_pendingUpdaters": Set {},
                      "_store": RelayMarkSweepStore {
                        "_hasScheduledGC": false,
                        "_index": 0,
                        "_recordSource": Object {},
                        "_roots": Map {},
                        "_subscriptions": Set {},
                        "_updatedRecordIDs": Object {},
                      },
                    },
                    "_store": RelayMarkSweepStore {
                      "_hasScheduledGC": false,
                      "_index": 0,
                      "_recordSource": Object {},
                      "_roots": Map {},
                      "_subscriptions": Set {},
                      "_updatedRecordIDs": Object {},
                    },
                    "setNet": [Function],
                    "unstable_internal": Object {
                      "areEqualSelectors": [Function],
                      "createFragmentSpecResolver": [Function],
                      "createOperationSelector": [Function],
                      "getDataIDsFromObject": [Function],
                      "getFragment": [Function],
                      "getOperation": [Function],
                      "getSelector": [Function],
                      "getSelectorList": [Function],
                      "getSelectorsFromObject": [Function],
                      "getVariablesFromObject": [Function],
                    },
                  }
            }
            query={[Function]}
            render={[Function]}
            variables={
                Object {
                    "cursor": null,
                    "first": 20,
                  }
            }
        />
    </div>
</div>,
  "nodes": Array [
    <div
      className="Dashboard flex flex-column"
>
      <div
            className="Dashboard__view flex-1-0-auto"
      >
            <ReactRelayQueryRenderer
                  environment={
                        RelayModernEnvironment {
                              "_network": Object {
                                "fetch": [Function],
                                "request": [Function],
                                "requestStream": [Function],
                              },
                              "_publishQueue": RelayPublishQueue {
                                "_appliedOptimisticUpdates": Set {},
                                "_backup": Object {},
                                "_handlerProvider": [Function],
                                "_pendingBackupRebase": false,
                                "_pendingOptimisticUpdates": Set {},
                                "_pendingPayloads": Set {},
                                "_pendingUpdaters": Set {},
                                "_store": RelayMarkSweepStore {
                                  "_hasScheduledGC": false,
                                  "_index": 0,
                                  "_recordSource": Object {},
                                  "_roots": Map {},
                                  "_subscriptions": Set {},
                                  "_updatedRecordIDs": Object {},
                                },
                              },
                              "_store": RelayMarkSweepStore {
                                "_hasScheduledGC": false,
                                "_index": 0,
                                "_recordSource": Object {},
                                "_roots": Map {},
                                "_subscriptions": Set {},
                                "_updatedRecordIDs": Object {},
                              },
                              "setNet": [Function],
                              "unstable_internal": Object {
                                "areEqualSelectors": [Function],
                                "createFragmentSpecResolver": [Function],
                                "createOperationSelector": [Function],
                                "getDataIDsFromObject": [Function],
                                "getFragment": [Function],
                                "getOperation": [Function],
                                "getSelector": [Function],
                                "getSelectorList": [Function],
                                "getSelectorsFromObject": [Function],
                                "getVariablesFromObject": [Function],
                              },
                            }
                  }
                  query={[Function]}
                  render={[Function]}
                  variables={
                        Object {
                              "cursor": null,
                              "first": 20,
                            }
                  }
            />
      </div>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <DashboardContainer
        footerWorkerCallback={[Function]}
        history={
                Object {
                        "action": "POP",
                        "block": [Function],
                        "createHref": [Function],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "length": 1,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
        }
        match={
                Object {
                        "params": Object {
                          "id": "labbbooks",
                        },
                      }
        }
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": DashboardContainer {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "footerWorkerCallback": [Function],
          "history": Object {
            "action": "POP",
            "block": [Function],
            "createHref": [Function],
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "length": 1,
            "listen": [Function],
            "location": Object {
              "hash": "",
              "pathname": "/",
              "search": "",
              "state": undefined,
            },
            "push": [Function],
            "replace": [Function],
          },
          "match": Object {
            "params": Object {
              "id": "labbbooks",
            },
          },
        },
        "refs": Object {},
        "state": Object {
          "selectedComponent": "labbbooks",
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="Dashboard flex flex-column"
>
          <div
                    className="Dashboard__view flex-1-0-auto"
          >
                    <ReactRelayQueryRenderer
                              environment={
                                        RelayModernEnvironment {
                                                  "_network": Object {
                                                    "fetch": [Function],
                                                    "request": [Function],
                                                    "requestStream": [Function],
                                                  },
                                                  "_publishQueue": RelayPublishQueue {
                                                    "_appliedOptimisticUpdates": Set {},
                                                    "_backup": Object {},
                                                    "_handlerProvider": [Function],
                                                    "_pendingBackupRebase": false,
                                                    "_pendingOptimisticUpdates": Set {},
                                                    "_pendingPayloads": Set {},
                                                    "_pendingUpdaters": Set {},
                                                    "_store": RelayMarkSweepStore {
                                                      "_hasScheduledGC": false,
                                                      "_index": 0,
                                                      "_recordSource": Object {},
                                                      "_roots": Map {},
                                                      "_subscriptions": Set {},
                                                      "_updatedRecordIDs": Object {},
                                                    },
                                                  },
                                                  "_store": RelayMarkSweepStore {
                                                    "_hasScheduledGC": false,
                                                    "_index": 0,
                                                    "_recordSource": Object {},
                                                    "_roots": Map {},
                                                    "_subscriptions": Set {},
                                                    "_updatedRecordIDs": Object {},
                                                  },
                                                  "setNet": [Function],
                                                  "unstable_internal": Object {
                                                    "areEqualSelectors": [Function],
                                                    "createFragmentSpecResolver": [Function],
                                                    "createOperationSelector": [Function],
                                                    "getDataIDsFromObject": [Function],
                                                    "getFragment": [Function],
                                                    "getOperation": [Function],
                                                    "getSelector": [Function],
                                                    "getSelectorList": [Function],
                                                    "getSelectorsFromObject": [Function],
                                                    "getVariablesFromObject": [Function],
                                                  },
                                                }
                              }
                              query={[Function]}
                              render={[Function]}
                              variables={
                                        Object {
                                                  "cursor": null,
                                                  "first": 20,
                                                }
                              }
                    />
          </div>
</div>,
        "_debugID": 2,
        "_renderedOutput": <div
          className="Dashboard flex flex-column"
>
          <div
                    className="Dashboard__view flex-1-0-auto"
          >
                    <ReactRelayQueryRenderer
                              environment={
                                        RelayModernEnvironment {
                                                  "_network": Object {
                                                    "fetch": [Function],
                                                    "request": [Function],
                                                    "requestStream": [Function],
                                                  },
                                                  "_publishQueue": RelayPublishQueue {
                                                    "_appliedOptimisticUpdates": Set {},
                                                    "_backup": Object {},
                                                    "_handlerProvider": [Function],
                                                    "_pendingBackupRebase": false,
                                                    "_pendingOptimisticUpdates": Set {},
                                                    "_pendingPayloads": Set {},
                                                    "_pendingUpdaters": Set {},
                                                    "_store": RelayMarkSweepStore {
                                                      "_hasScheduledGC": false,
                                                      "_index": 0,
                                                      "_recordSource": Object {},
                                                      "_roots": Map {},
                                                      "_subscriptions": Set {},
                                                      "_updatedRecordIDs": Object {},
                                                    },
                                                  },
                                                  "_store": RelayMarkSweepStore {
                                                    "_hasScheduledGC": false,
                                                    "_index": 0,
                                                    "_recordSource": Object {},
                                                    "_roots": Map {},
                                                    "_subscriptions": Set {},
                                                    "_updatedRecordIDs": Object {},
                                                  },
                                                  "setNet": [Function],
                                                  "unstable_internal": Object {
                                                    "areEqualSelectors": [Function],
                                                    "createFragmentSpecResolver": [Function],
                                                    "createOperationSelector": [Function],
                                                    "getDataIDsFromObject": [Function],
                                                    "getFragment": [Function],
                                                    "getOperation": [Function],
                                                    "getSelector": [Function],
                                                    "getSelectorList": [Function],
                                                    "getSelectorsFromObject": [Function],
                                                    "getVariablesFromObject": [Function],
                                                  },
                                                }
                              }
                              query={[Function]}
                              render={[Function]}
                              variables={
                                        Object {
                                                  "cursor": null,
                                                  "first": 20,
                                                }
                              }
                    />
          </div>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <DashboardContainer
    footerWorkerCallback={[Function]}
    history={
        Object {
            "action": "POP",
            "block": [Function],
            "createHref": [Function],
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "length": 1,
            "listen": [Function],
            "location": Object {
              "hash": "",
              "pathname": "/",
              "search": "",
              "state": undefined,
            },
            "push": [Function],
            "replace": [Function],
          }
    }
    match={
        Object {
            "params": Object {
              "id": "labbbooks",
            },
          }
    }
/>,
}
`;

exports[`Test create history has a replace method 2`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="Dashboard flex flex-column"
>
    <div
        className="Dashboard__view flex-1-0-auto"
    >
        <DatasetSets />
    </div>
</div>,
  "nodes": Array [
    <div
      className="Dashboard flex flex-column"
>
      <div
            className="Dashboard__view flex-1-0-auto"
      >
            <DatasetSets />
      </div>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <DashboardContainer
        footerWorkerCallback={[Function]}
        history={
                Object {
                        "action": "POP",
                        "block": [Function],
                        "createHref": [Function],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "length": 1,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
        }
        match={
                Object {
                        "params": Object {
                          "id": "datasets",
                        },
                      }
        }
/>,
      "_debugID": 3,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": DashboardContainer {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "footerWorkerCallback": [Function],
          "history": Object {
            "action": "POP",
            "block": [Function],
            "createHref": [Function],
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "length": 1,
            "listen": [Function],
            "location": Object {
              "hash": "",
              "pathname": "/",
              "search": "",
              "state": undefined,
            },
            "push": [Function],
            "replace": [Function],
          },
          "match": Object {
            "params": Object {
              "id": "datasets",
            },
          },
        },
        "refs": Object {},
        "state": Object {
          "selectedComponent": "datasets",
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="Dashboard flex flex-column"
>
          <div
                    className="Dashboard__view flex-1-0-auto"
          >
                    <DatasetSets />
          </div>
</div>,
        "_debugID": 4,
        "_renderedOutput": <div
          className="Dashboard flex flex-column"
>
          <div
                    className="Dashboard__view flex-1-0-auto"
          >
                    <DatasetSets />
          </div>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <DashboardContainer
    footerWorkerCallback={[Function]}
    history={
        Object {
            "action": "POP",
            "block": [Function],
            "createHref": [Function],
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "length": 1,
            "listen": [Function],
            "location": Object {
              "hash": "",
              "pathname": "/",
              "search": "",
              "state": undefined,
            },
            "push": [Function],
            "replace": [Function],
          }
    }
    match={
        Object {
            "params": Object {
              "id": "datasets",
            },
          }
    }
/>,
}
`;
